import{_ as t,a as e,e as o}from"../../_/fb07a27e.js";import"process";import"rest";import"rest/interceptor";import"rest/interceptor/errorCode";import"rest/interceptor/pathPrefix";import"rest/interceptor/mime";import"rest/interceptor/params";import"rest/interceptor/defaultRequest";import"rest/interceptor/template";import"rest/util/base64";import"../get_user.js";var i={};var r=t,p=e,n=o;var a=p("MapboxGeocoding");var s=5;var m=3;function roundTo(t,e){var o=Math.pow(10,e);return Math.round(t*o)/o}a.prototype.geocodeForward=function(t,e,o){if(void 0===o&&"function"===typeof e){o=e;e={}}if(Array.isArray(t)){if("mapbox.places-permanent"!==e.dataset)throw new Error("Batch geocoding is only available with the mapbox.places-permanent endpoint. See https://mapbox.com/api-documentation/#batch-requests for details");t=t.join(";")}r("string"===typeof t,"query must be a string");r("object"===typeof e,"options must be an object");var i={query:t,dataset:"mapbox.places"};var p=true;var a=m;if(e.precision){r("number"===typeof e.precision,"precision option must be number");a=e.precision}if(e.proximity){r("number"===typeof e.proximity.latitude&&"number"===typeof e.proximity.longitude,"proximity must be an object with numeric latitude & longitude properties");i.proximity=roundTo(e.proximity.longitude,a)+","+roundTo(e.proximity.latitude,a)}if(e.bbox){r("number"===typeof e.bbox[0]&&"number"===typeof e.bbox[1]&&"number"===typeof e.bbox[2]&&"number"===typeof e.bbox[3]&&4===e.bbox.length,"bbox must be an array with numeric values in the form [minX, minY, maxX, maxY]");i.bbox=e.bbox[0]+","+e.bbox[1]+","+e.bbox[2]+","+e.bbox[3]}if(e.limit){r("number"===typeof e.limit,"limit must be a number");i.limit=e.limit}if(e.dataset){r("string"===typeof e.dataset,"dataset option must be string");i.dataset=e.dataset}if(e.country){r("string"===typeof e.country,"country option must be string");i.country=e.country}if(e.types){r("string"===typeof e.types,"types option must be string");i.types=e.types}if("boolean"===typeof e.autocomplete){r("boolean"===typeof e.autocomplete,"autocomplete must be a boolean");i.autocomplete=e.autocomplete}return this.client({path:n.API_GEOCODING_FORWARD,params:i,callback:o})};a.prototype.geocodeReverse=function(t,e,o){if(void 0===o&&"function"===typeof e){o=e;e={}}r("object"===typeof t,"location must be an object");r("object"===typeof e,"options must be an object");r("number"===typeof t.latitude&&"number"===typeof t.longitude,"location must be an object with numeric latitude & longitude properties");var i={dataset:"mapbox.places"};if(e.dataset){r("string"===typeof e.dataset,"dataset option must be string");i.dataset=e.dataset}var p=s;if(e.precision){r("number"===typeof e.precision,"precision option must be number");p=e.precision}if(e.types){r("string"===typeof e.types,"types option must be string");i.types=e.types}if(e.limit){r("number"===typeof e.limit,"limit option must be a number");r(1===e.types.split(",").length,"a single type must be specified to use the limit option");i.limit=e.limit}i.longitude=roundTo(t.longitude,p);i.latitude=roundTo(t.latitude,p);return this.client({path:n.API_GEOCODING_REVERSE,params:i,callback:o})};i=a;var u=i;export default u;

